import React, { useState } from 'react';
import { groupsAPI } from '../services/api';
import './InviteMembersModal.css';

interface InviteMembersModalProps {
  isOpen: boolean;
  onClose: () => void;
  groupId: string;
  groupName: string;
  inviteCode: string;
}

const InviteMembersModal: React.FC<InviteMembersModalProps> = ({
  isOpen,
  onClose,
  groupId,
  groupName,
  inviteCode
}) => {
  const [email, setEmail] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!email.trim()) {
      setError('–í–≤–µ–¥–∏—Ç–µ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      return;
    }

    setLoading(true);
    setError('');
    setSuccess('');

    try {
      await groupsAPI.invite(groupId, email.trim());
      setSuccess(`–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ ${email}`);
      setEmail('');
      setTimeout(() => {
        onClose();
      }, 2000);
    } catch (err: any) {
      setError(err.response?.data?.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è');
    } finally {
      setLoading(false);
    }
  };

  const handleClose = () => {
    setEmail('');
    setError('');
    setSuccess('');
    onClose();
  };

  const copyInviteCode = () => {
    navigator.clipboard.writeText(inviteCode);
    alert('–ö–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
  };

  if (!isOpen) return null;

  return (
    <div className="modal-overlay" onClick={handleClose}>
      <div className="modal-content invite-modal" onClick={(e) => e.stopPropagation()}>
        <div className="modal-header">
          <h2>–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É</h2>
          <button className="close-button" onClick={handleClose}>√ó</button>
        </div>

        <div className="invite-content">
          <div className="invite-method">
            <h3>–°–ø–æ—Å–æ–± 1: –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ email</h3>
            <form onSubmit={handleSubmit} className="invite-form">
              {error && <div className="error-message">{error}</div>}
              {success && <div className="success-message">{success}</div>}

              <div className="form-group">
                <label htmlFor="email">Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</label>
                <input
                  id="email"
                  type="email"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  placeholder="example@email.com"
                  required
                />
              </div>

              <button
                type="submit"
                className="btn-primary"
                disabled={loading}
              >
                {loading ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ'}
              </button>
            </form>
          </div>

          <div className="invite-divider">
            <span>–∏–ª–∏</span>
          </div>

          <div className="invite-method">
            <h3>–°–ø–æ—Å–æ–± 2: –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–¥–æ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è</h3>
            <div className="invite-code-section">
              <div className="invite-code-display">
                {inviteCode}
              </div>
              <button 
                className="btn-outline copy-btn"
                onClick={copyInviteCode}
              >
                üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
              </button>
              <p className="invite-hint">
                –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–∏–º –∫–æ–¥–æ–º —Å –¥—Ä—É–∑—å—è–º–∏, —á—Ç–æ–±—ã –æ–Ω–∏ –º–æ–≥–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–µ
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default InviteMembersModal;
