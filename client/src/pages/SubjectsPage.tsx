import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import Header from '../components/Header';
import { subjectsAPI } from '../services/api';
import Button from '../components/Button'; // –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç Button
import './SubjectsPage.css';
import '../App.css';

interface Subject {
  _id: string;
  name: string;
  description: string;
  color: string;
  progress: number;
}

const SubjectsPage: React.FC = () => {
  const [subjects, setSubjects] = useState<Subject[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    loadSubjects();
  }, []);

  const loadSubjects = async () => {
    try {
      setLoading(true);
      const response = await subjectsAPI.getAll();
      if (response.data.success) {
        setSubjects(response.data.subjects);
      } else {
        const mockSubjects: Subject[] = [
          {
            _id: '1',
            name: '–ë–∏–æ–ª–æ–≥–∏—è',
            description: '–ò–∑—É—á–µ–Ω–∏–µ –∂–∏–≤—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–º–æ–≤ –∏ –∏—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥–æ–π',
            color: 'green',
            progress: 75
          },
          {
            _id: '2',
            name: '–•–∏–º–∏—è',
            description: '–ò–∑—É—á–µ–Ω–∏–µ –≤–µ—â–µ—Å—Ç–≤, –∏—Ö —Å–≤–æ–π—Å—Ç–≤ –∏ –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–π',
            color: 'blue',
            progress: 40
          },
          {
            _id: '3',
            name: '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞',
            description: '–ù–∞—É–∫–∞ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö –∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ö',
            color: 'purple',
            progress: 20
          },
          {
            _id: '4',
            name: '–§–∏–∑–∏–∫–∞',
            description: '–ò–∑—É—á–µ–Ω–∏–µ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–∫–æ–Ω–æ–≤ –ø—Ä–∏—Ä–æ–¥—ã',
            color: 'red',
            progress: 60
          },
          {
            _id: '5',
            name: '–ò—Å—Ç–æ—Ä–∏—è',
            description: '–ò–∑—É—á–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ–≥–æ —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–∞',
            color: 'yellow',
            progress: 85
          }
        ];
        setSubjects(mockSubjects);
      }
    } catch (error) {
      console.error('Error loading subjects:', error);
      const mockSubjects: Subject[] = [
        {
          _id: '1',
          name: '–ë–∏–æ–ª–æ–≥–∏—è',
          description: '–ò–∑—É—á–µ–Ω–∏–µ –∂–∏–≤—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–º–æ–≤ –∏ –∏—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥–æ–π',
          color: 'green',
          progress: 75
        },
        {
          _id: '2',
          name: '–•–∏–º–∏—è',
          description: '–ò–∑—É—á–µ–Ω–∏–µ –≤–µ—â–µ—Å—Ç–≤, –∏—Ö —Å–≤–æ–π—Å—Ç–≤ –∏ –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–π',
          color: 'blue',
          progress: 40
        }
      ];
      setSubjects(mockSubjects);
    } finally {
      setLoading(false);
    }
  };

  const ProgressBar: React.FC<{ progress: number; color: string }> = ({ progress, color }) => (
    <div className="progress-container">
      <div
        className={`progress-bar ${color}`}
        style={{ width: `${progress}%` }}
      ></div>
      <span className="progress-text">{progress}%</span>
    </div>
  );

  if (loading) {
    return (
      <div className="subjects-page">
        <Header />
        <div className="page-with-header">
          <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤...</div>
        </div>
      </div>
    );
  }

  return (
    <div className="subjects-page">
      <Header />
      <div className="page-with-header">
        <div className="subjects-container">
          <div className="page-header">
            <h1>–ú–æ–∏ –ø—Ä–µ–¥–º–µ—Ç—ã</h1>
            <p>–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –≤—Å–µ–º –ø—Ä–µ–¥–º–µ—Ç–∞–º</p>
          </div>
          {subjects.length === 0 ? (
            <div className="empty-state">
              <div className="empty-icon">üìö</div>
              <h3>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤</h3>
              <p>–ü—Ä–µ–¥–º–µ—Ç—ã –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è</p>
              <Button variant="primary" href="/dashboard"> {/* –ó–∞–º–µ–Ω–∏–ª–∏ –Ω–∞ Button */}
                –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
              </Button>
            </div>
          ) : (
            <div className="subjects-grid">
              {subjects.map((subject) => (
                <div key={subject._id} className="subject-card">
                  <div className="subject-header">
                    <h3 className={`subject-title ${subject.color}`}>{subject.name}</h3>
                    <span className="progress-percent">{subject.progress}%</span>
                  </div>
                  <p className="subject-description">{subject.description}</p>
                  <ProgressBar progress={subject.progress} color={subject.color} />
                  <div className="subject-actions button-group"> {/* –î–æ–±–∞–≤–ª–µ–Ω button-group –¥–ª—è —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è */}
                    <Button variant="outline" href={`/subjects/${subject._id}`}>
                      –ó–∞–º–µ—Ç–∫–∏
                    </Button>
                    <Button variant="primary" href={`/subjects/${subject._id}/flashcards`}>
                      –ö–∞—Ä—Ç–æ—á–∫–∏
                    </Button>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default SubjectsPage;
